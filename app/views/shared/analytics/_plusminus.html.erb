<style>
#plusminus-table thead tr .header {
  cursor: pointer;
}
</style>

<a href="<%= url_for(format: :csv, table: 'plusminus') %>">Export into Excel</a><br>
<% if is_allowed_to_see_voter_data? %>
  <a href="<%= url_for(format: :csv, table: 'plusminuses_individual') %>">Export individual votes into Excel</a>
<% end %>

<table id="plusminus-table" class="table table-striped">
  <thead>
    <tr>
      <th>Project</th>
      <th>Net upvotes</th>
      <th>Upvotes</th>
      <th>Downvotes</th>
    </tr>
  </thead>
  <tbody>
    <% @plusminus.sort_by {|p| -p[:netvotes]}.each do |project| %>
      <tr>
        <td><%= project[:title] %></td>
        <td><%= project[:netvotes] %></td>
        <td><%= project[:upvotes] %></td>
        <td><%= project[:downvotes] %></td>
      </tr>
    <% end %>
  <tbody>
</table>

<p>
  Sorted by &nbsp;
  <label class="radio-inline">
    <input type="radio" name="plusminus_order" value="netvotes" checked="checked"> Netvotes
  </label>
  <label class="radio-inline">
    <input type="radio" name="plusminus_order" value="upvotes"> Upvotes
  </label>
  <label class="radio-inline">
    <input type="radio" name="plusminus_order" value="downvotes"> Downvotes
  </label>
</p>
<svg id="plusminus-bar-chart"></svg>

<!-- Analytics table for plusminus -->
<h3>Plus/minus - Vote counts</h3>
<table class="table table-bordered">
  <thead>
    <tr>
      <th></th>
      <th>Votes</th>
    </tr>
  </thead>
  <tbody>
    <% @plusminus_voters_by_date.each do |v| %>
      <tr>
        <td><%= v.date.strftime('%a, %B %e, %Y') %></td>
        <td><%= number_with_delimiter(v.vote_count) %></td>
      </tr>
    <% end %>
    <tr>
      <td><b>Total</b></td>
      <td><%= number_with_delimiter(@plusminus_total) %> </td>
    </tr>
  </tbody>
</table>

<script>
var plusminus = <%= @plusminus.to_json.html_safe %>;
var plusminus_copy = <%= @plusminus.to_json.html_safe %>; // FIXME:

(function() {
  var order = "netvotes"
  var genericSortFunction = function(key, descending) {
    var c = descending ? -1 : 1;
    return function(a, b) {
      if (a[key] != b[key]) return (b[key] - a[key]) * c;
      // To make the sorting more stable
      if (a['netvotes'] != b['netvotes']) return b['netvotes'] - a['netvotes'];
      return b.id - a.id;
    };
  }
  var sortFunctions = {
    netvotes: genericSortFunction('netvotes', false),
    upvotes: genericSortFunction('upvotes', false),
    downvotes: genericSortFunction('downvotes', true)
  }

  var svg = d3.select("#plusminus-bar-chart")
      .attr("width", width + margin.left + margin.right)
      .attr("height", height + margin.top + margin.bottom)
    .append("g")
      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

  // Coloring function.
  var pmColor = function(name, positive_netvotes) {
    if (name == "upvotes") return "#ccffcc";
    if (name == "downvotes") return "#ffcccc";
    return positive_netvotes ? "#008000" : "#ff0000";  // netvotes have two colors, depending on the value
  }

  // Calculate the position and size of each of the three rectangles of each project.
  plusminus_copy.forEach(function(d) {
    d.modes = [
      {name: "upvotes", y0: 0, y1: d.upvotes},
      {name: "downvotes", y0: -d.downvotes, y1: 0},
      {name: "netvotes", y0: Math.min(d.upvotes - d.downvotes, 0), y1: Math.max(d.upvotes - d.downvotes, 0)}
    ];
  });

  plusminus_copy.sort(sortFunctions[order]);

  var x = d3.scale.ordinal().rangeRoundBands([0, width], .2);
  var y = d3.scale.linear().range([height, 0]);

  x.domain(plusminus_copy.map(function(d) { return d.title; }));
  y.domain([-d3.max(plusminus_copy, function(d) { return d.downvotes; }), d3.max(plusminus_copy, function(d) { return d.upvotes; })]);

  var xAxis = d3.svg.axis()
    .scale(x)
    .orient("bottom");

  var yAxis = d3.svg.axis()
    .scale(y)
    .orient("left");

  // x-axis.
  svg.append("g")
    .attr("class", "x axis")
    .attr("transform", "translate(0," + height + ")")
    .call(xAxis)
    .selectAll("text")
      .style("text-anchor", "start")
      .attr("dx", "0.8em")
      .attr("dy", "0.8em")
      .attr("transform", "rotate(45)");

  // y-axis.
  svg.append("g")
      .attr("class", "y axis")
      .call(yAxis)
    .append("text")
      .attr("dy", "-.71em")
      .style("text-anchor", "end")
      .text("Votes");

  // Bars.
  var project = svg.selectAll(".project")
    .data(plusminus_copy)
  .enter().append("g")
    .attr("class", "g")
    .attr("transform", function(d) { return "translate(" + x(d.title) + ",0)"; });

  project.selectAll("rect")
    .data(function(d) { return d.modes; })
  .enter().append("rect")
    .attr("width", function (d) { return x.rangeBand() - ((d.name == "netvotes") ? 10 : 0); })
    .attr("x", function (d) { return (d.name == "netvotes") ? 5 : 0; })
    .attr("y", function(d) { return y(d.y1); })
    .attr("height", function(d) { return y(d.y0) - y(d.y1); })
    .style("fill", function(d) { return pmColor(d.name, d.y1 > 0) });

  // Legend.
  var legend = svg.selectAll(".legend")
    .data(["upvotes", "downvotes", "netvotes"])
  .enter().append("g")
    .attr("class", "legend")
    .attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });

  legend.append("rect")
    .attr("x", width - 18)
    .attr("width", 18)
    .attr("height", 18)
    .style("fill", function(d) { return pmColor(d, true); })
    .each(function(d, i) {
      if (d == "netvotes") { // draw a red triangle on the legend of netvotes
        d3.select(this.parentNode).append("path")
          .attr("d", "M " + width + " 0 l 0 18 -18 0")
          .style("fill", pmColor(d, false));
      }
    });

  legend.append("text")
    .attr("x", width - 24)
    .attr("y", 9)
    .attr("dy", ".35em")
    .style("text-anchor", "end")
    .text(function(d) { return d; });

  function redrawPlusminusBarChart() {
    plusminus_copy.sort(sortFunctions[order]);
    x.domain(plusminus_copy.map(function(d) { return d.title; }));

    var transition = svg.transition().duration(750)
    transition.selectAll(".g")
      .attr("transform", function(d) { return "translate(" + x(d.title) + ",0)"; });

    transition.selectAll(".x.axis")
      .call(xAxis);

    svg.selectAll(".x.axis text")
      .style("text-anchor", "start")
      .attr("dx", "0.8em")
      .attr("dy", "0.8em");
  }

  $("input[name='plusminus_order']:radio").change(function() {
    order = $("input[name='plusminus_order']:checked").val();
    redrawPlusminusBarChart();
  });

  $('#plusminus-table').tablesorter({
    sortList: [[1, 1]]  // sort the second column by default
  });
})();
</script>
