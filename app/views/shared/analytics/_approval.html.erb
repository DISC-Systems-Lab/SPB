<% if !is_public && !is_allowed_to_see_exact_results? %>
  <p class="alert alert-warning" role="alert">
    <b>Note:</b> The vote counts below have been rounded to protect the voters' privacy.
  </p>
<% end %>

<% if !is_public %>
  <% if is_allowed_to_see_voter_data? %>
    <a href="<%= analytics_cooccurrence_admin_election_path(@election) %>">View co-occurrence matrix</a><br>
  <% end %>
  <a href="<%= url_for(format: :csv, table: 'approvals') %>">Export into Excel</a><br>
  <% if is_allowed_to_see_voter_data? %>
    <% if @election.slug == '49' || @election.slug.start_with?('49_20')  # FIXME %>
      <a href="<%= analytics_chicago49_admin_election_path(@election, format: :csv) %>">Export individual votes into Excel (Chicago's 49th Ward format)</a><br>
    <% else %>
      <a href="<%= url_for(format: :csv, table: 'approvals_individual') %>">Export individual votes into Excel</a>
    <% end %>
  <% end %>
<% end %>

<div id="approval-analytics-table"></div><br>

<svg id="approval-bar-chart"></svg>

<style>
#approval-table .progress {
  margin-bottom: 0;
  background-color: #e4e4e4;
}
</style>

<script type="text/javascript">
var approvals = <%= @approvals.to_json.html_safe %>;
var max_approval_vote_count = <%= @max_approval_vote_count.to_json %>;
var categorized = <%= @election.categorized? %>;

// Approval table.
function reloadApprovalTable() {
  var table = document.createElement('table');
  table.setAttribute("id", "approval-table");
  table.className = 'table table-bordered table-sm';

  // Header
  var thead = document.createElement('thead');
  thead.className = 'thead-light';
  {
    var tr = document.createElement('tr');

    {
      var th = document.createElement('th');
      th.textContent = 'Project';
      tr.appendChild(th);

      if (categorized) {
        var th = document.createElement('th');
        th.textContent = 'Category';
        tr.appendChild(th);
      }

      th = document.createElement('th');
      th.textContent = 'Cost';
      tr.appendChild(th);

      th = document.createElement('th');
      th.textContent = 'Votes';
      tr.appendChild(th);
    }

    thead.appendChild(tr);
  }
  table.appendChild(thead);

  // Rows for projects
  var tbody = document.createElement('tbody');
  for (var i = 0; i < approvals.length; ++i) {
    var tr = document.createElement('tr');
    var project = projects[idToIndex[approvals[i].id]];

    {
      // Title
      var td = document.createElement('td');
      td.textContent = project.title;
      tr.appendChild(td);

      if (categorized) {
        // Category name
        var td = document.createElement('td');
        td.textContent = project.category_name;
        tr.appendChild(td);
      }

      // Cost
      td = document.createElement('td');
      td.textContent = project.adjustable_cost ? ('$0 - ' + '$' + numberWithDelimiter(project.cost)) : ('$' + numberWithDelimiter(project.cost)); // FIXME:
      tr.appendChild(td);

      // Votes
      td = document.createElement('td');
      if (!project.adjustable_cost) {
        var progressDiv = document.createElement('div');
        progressDiv.className = 'progress';
        {
          var progressBarDiv = document.createElement('div');
          progressBarDiv.className = 'progress-bar bg-success';
          progressBarDiv.style.width = (approvals[i].vote_count / max_approval_vote_count * 100) + '%';
          progressBarDiv.textContent = numberWithDelimiter(approvals[i].vote_count);
          progressDiv.appendChild(progressBarDiv);
        }
        td.appendChild(progressDiv);
      } else {
        // We don't show the vote counts for adjustable cost projects in the table
        // because they might be misleading.
        var link = document.createElement('a');
        link.href = "<%=j url_for('analytics_adjustable_cost_projects') %>";
        link.textContent = "View details";
        td.appendChild(link);
      }
      tr.appendChild(td);
    }

    tbody.appendChild(tr);
  }
  table.appendChild(tbody);

  document.getElementById('approval-analytics-table').innerHTML = '';
  document.getElementById('approval-analytics-table').appendChild(table);
}

reloadApprovalTable();

if (window.reloadCallbacks) {
  reloadCallbacks.push(function(data) {
    approvals = data.approvals;
    max_approval_vote_count = data.max_approval_vote_count;
    reloadApprovalTable();
  });
}

// Approval bar chart.
(function() {
  var svg = d3.select("#approval-bar-chart")
      .attr("width", width + margin.left + margin.right)
      .attr("height", height + margin.top + margin.bottom)
    .append("g")
      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

  var x = d3.scale.ordinal().rangeRoundBands([0, width], .2);
  var y = d3.scale.linear().range([height, 0]);

  // Filter out adjustable cost projects from the bar chart because they might be misleading.
  var data = approvals.filter(function(p) { return !projects[idToIndex[p.id]].adjustable_cost; });

  x.domain(data.slice(0).sort(function(a, b){ return b.vote_count - a.vote_count }).map(function(p) { return p.id; }));
  y.domain([0, d3.max(data, function(p) { return p.vote_count; })]);

  var xAxis = d3.svg.axis()
    .scale(x)
    .orient("bottom");

  var yAxis = d3.svg.axis()
    .scale(y)
    .orient("left");

  // x-axis.
  svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height + ")")
      .call(xAxis)
      .selectAll("text")
        .text(function (id) { return projects[idToIndex[id]].title; })
        .style("text-anchor", "start")
        .attr("dx", "0.8em")
        .attr("dy", "0.8em")
        .attr("transform", "rotate(45)");

  // y-axis.
  svg.append("g")
      .attr("class", "y axis")
      .call(yAxis)
    .append("text")
      .attr("dy", "-.71em")
      .style("text-anchor", "end")
      .text("Votes");

  // Bars.
  var bar = svg.selectAll(".bar")
      .data(data).enter()

  bar.append("rect")
    .attr("class", "bar")
    .attr("x", function(p) { return x(p.id); })
    .attr("width", x.rangeBand())
    .attr("y", function(p) { return y(p.vote_count); })
    .attr("height", function(p) { return height - y(p.vote_count); });

  // Text above each bar.
  bar.append("text")
    .attr("x", function(p) { return x(p.id) + x.rangeBand() / 2; })
    .attr("y", function(p) { return y(p.vote_count); })
    .attr("dy", "-.4em")
    .style("text-anchor", "middle")
    .style("font-size", "13")
    .text(function(p) { return numberWithDelimiter(p.vote_count); });
})();
</script>
